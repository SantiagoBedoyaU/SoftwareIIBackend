// Code generated by MockGen. DO NOT EDIT.
// Source: email_port.go
//
// Generated by this command:
//
//	mockgen -source=email_port.go -destination=mocks/mock_email_port.go -typed
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendAppointmentEmail mocks base method.
func (m *MockEmailService) SendAppointmentEmail(ctx context.Context, fullname, email string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppointmentEmail", ctx, fullname, email, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppointmentEmail indicates an expected call of SendAppointmentEmail.
func (mr *MockEmailServiceMockRecorder) SendAppointmentEmail(ctx, fullname, email, date any) *MockEmailServiceSendAppointmentEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppointmentEmail", reflect.TypeOf((*MockEmailService)(nil).SendAppointmentEmail), ctx, fullname, email, date)
	return &MockEmailServiceSendAppointmentEmailCall{Call: call}
}

// MockEmailServiceSendAppointmentEmailCall wrap *gomock.Call
type MockEmailServiceSendAppointmentEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailServiceSendAppointmentEmailCall) Return(arg0 error) *MockEmailServiceSendAppointmentEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailServiceSendAppointmentEmailCall) Do(f func(context.Context, string, string, time.Time) error) *MockEmailServiceSendAppointmentEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailServiceSendAppointmentEmailCall) DoAndReturn(f func(context.Context, string, string, time.Time) error) *MockEmailServiceSendAppointmentEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendPasswordEmail mocks base method.
func (m *MockEmailService) SendPasswordEmail(ctx context.Context, fullname, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordEmail", ctx, fullname, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordEmail indicates an expected call of SendPasswordEmail.
func (mr *MockEmailServiceMockRecorder) SendPasswordEmail(ctx, fullname, email, password any) *MockEmailServiceSendPasswordEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordEmail", reflect.TypeOf((*MockEmailService)(nil).SendPasswordEmail), ctx, fullname, email, password)
	return &MockEmailServiceSendPasswordEmailCall{Call: call}
}

// MockEmailServiceSendPasswordEmailCall wrap *gomock.Call
type MockEmailServiceSendPasswordEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailServiceSendPasswordEmailCall) Return(arg0 error) *MockEmailServiceSendPasswordEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailServiceSendPasswordEmailCall) Do(f func(context.Context, string, string, string) error) *MockEmailServiceSendPasswordEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailServiceSendPasswordEmailCall) DoAndReturn(f func(context.Context, string, string, string) error) *MockEmailServiceSendPasswordEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendRecoverPasswordEmail mocks base method.
func (m *MockEmailService) SendRecoverPasswordEmail(ctx context.Context, fullname, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRecoverPasswordEmail", ctx, fullname, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRecoverPasswordEmail indicates an expected call of SendRecoverPasswordEmail.
func (mr *MockEmailServiceMockRecorder) SendRecoverPasswordEmail(ctx, fullname, email, token any) *MockEmailServiceSendRecoverPasswordEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRecoverPasswordEmail", reflect.TypeOf((*MockEmailService)(nil).SendRecoverPasswordEmail), ctx, fullname, email, token)
	return &MockEmailServiceSendRecoverPasswordEmailCall{Call: call}
}

// MockEmailServiceSendRecoverPasswordEmailCall wrap *gomock.Call
type MockEmailServiceSendRecoverPasswordEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEmailServiceSendRecoverPasswordEmailCall) Return(arg0 error) *MockEmailServiceSendRecoverPasswordEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEmailServiceSendRecoverPasswordEmailCall) Do(f func(context.Context, string, string, string) error) *MockEmailServiceSendRecoverPasswordEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEmailServiceSendRecoverPasswordEmailCall) DoAndReturn(f func(context.Context, string, string, string) error) *MockEmailServiceSendRecoverPasswordEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
