// Code generated by MockGen. DO NOT EDIT.
// Source: user_port.go
//
// Generated by this command:
//
//	mockgen -source=user_port.go -destination=mocks/mock_user_port.go -typed
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"
	domain "softwareIIbackend/internal/core/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, user any) *MockUserServiceCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, user)
	return &MockUserServiceCreateUserCall{Call: call}
}

// MockUserServiceCreateUserCall wrap *gomock.Call
type MockUserServiceCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceCreateUserCall) Return(arg0 error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceCreateUserCall) Do(f func(context.Context, *domain.User) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceCreateUserCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(ctx context.Context, DNI string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, DNI)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(ctx, DNI any) *MockUserServiceGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), ctx, DNI)
	return &MockUserServiceGetUserCall{Call: call}
}

// MockUserServiceGetUserCall wrap *gomock.Call
type MockUserServiceGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserCall) Return(arg0 *domain.User, arg1 error) *MockUserServiceGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserServiceGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserServiceGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockUserService) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserServiceMockRecorder) GetUserByEmail(ctx, email any) *MockUserServiceGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserService)(nil).GetUserByEmail), ctx, email)
	return &MockUserServiceGetUserByEmailCall{Call: call}
}

// MockUserServiceGetUserByEmailCall wrap *gomock.Call
type MockUserServiceGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByEmailCall) Return(arg0 *domain.User, arg1 error) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByEmailCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserServiceGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserInformation mocks base method.
func (m *MockUserService) GetUserInformation(ctx context.Context) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInformation", ctx)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInformation indicates an expected call of GetUserInformation.
func (mr *MockUserServiceMockRecorder) GetUserInformation(ctx any) *MockUserServiceGetUserInformationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInformation", reflect.TypeOf((*MockUserService)(nil).GetUserInformation), ctx)
	return &MockUserServiceGetUserInformationCall{Call: call}
}

// MockUserServiceGetUserInformationCall wrap *gomock.Call
type MockUserServiceGetUserInformationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserInformationCall) Return(arg0 *domain.User, arg1 error) *MockUserServiceGetUserInformationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserInformationCall) Do(f func(context.Context) (*domain.User, error)) *MockUserServiceGetUserInformationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserInformationCall) DoAndReturn(f func(context.Context) (*domain.User, error)) *MockUserServiceGetUserInformationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsersByRole mocks base method.
func (m *MockUserService) GetUsersByRole(ctx context.Context, role domain.UserRole) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRole", ctx, role)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRole indicates an expected call of GetUsersByRole.
func (mr *MockUserServiceMockRecorder) GetUsersByRole(ctx, role any) *MockUserServiceGetUsersByRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRole", reflect.TypeOf((*MockUserService)(nil).GetUsersByRole), ctx, role)
	return &MockUserServiceGetUsersByRoleCall{Call: call}
}

// MockUserServiceGetUsersByRoleCall wrap *gomock.Call
type MockUserServiceGetUsersByRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUsersByRoleCall) Return(arg0 []domain.User, arg1 error) *MockUserServiceGetUsersByRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUsersByRoleCall) Do(f func(context.Context, domain.UserRole) ([]domain.User, error)) *MockUserServiceGetUsersByRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUsersByRoleCall) DoAndReturn(f func(context.Context, domain.UserRole) ([]domain.User, error)) *MockUserServiceGetUsersByRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoadUserByCSV mocks base method.
func (m *MockUserService) LoadUserByCSV(ctx context.Context, users []*domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserByCSV", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadUserByCSV indicates an expected call of LoadUserByCSV.
func (mr *MockUserServiceMockRecorder) LoadUserByCSV(ctx, users any) *MockUserServiceLoadUserByCSVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserByCSV", reflect.TypeOf((*MockUserService)(nil).LoadUserByCSV), ctx, users)
	return &MockUserServiceLoadUserByCSVCall{Call: call}
}

// MockUserServiceLoadUserByCSVCall wrap *gomock.Call
type MockUserServiceLoadUserByCSVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceLoadUserByCSVCall) Return(arg0 error) *MockUserServiceLoadUserByCSVCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceLoadUserByCSVCall) Do(f func(context.Context, []*domain.User) error) *MockUserServiceLoadUserByCSVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceLoadUserByCSVCall) DoAndReturn(f func(context.Context, []*domain.User) error) *MockUserServiceLoadUserByCSVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserInformation mocks base method.
func (m *MockUserService) UpdateUserInformation(ctx context.Context, user *domain.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInformation", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInformation indicates an expected call of UpdateUserInformation.
func (mr *MockUserServiceMockRecorder) UpdateUserInformation(ctx, user any) *MockUserServiceUpdateUserInformationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInformation", reflect.TypeOf((*MockUserService)(nil).UpdateUserInformation), ctx, user)
	return &MockUserServiceUpdateUserInformationCall{Call: call}
}

// MockUserServiceUpdateUserInformationCall wrap *gomock.Call
type MockUserServiceUpdateUserInformationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserInformationCall) Return(arg0 error) *MockUserServiceUpdateUserInformationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserInformationCall) Do(f func(context.Context, *domain.UpdateUser) error) *MockUserServiceUpdateUserInformationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserInformationCall) DoAndReturn(f func(context.Context, *domain.UpdateUser) error) *MockUserServiceUpdateUserInformationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockUserService) UpdateUserPassword(ctx context.Context, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceMockRecorder) UpdateUserPassword(ctx, newPassword any) *MockUserServiceUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserService)(nil).UpdateUserPassword), ctx, newPassword)
	return &MockUserServiceUpdateUserPasswordCall{Call: call}
}

// MockUserServiceUpdateUserPasswordCall wrap *gomock.Call
type MockUserServiceUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserPasswordCall) Return(arg0 error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserPasswordCall) Do(f func(context.Context, string) error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserPasswordCall) DoAndReturn(f func(context.Context, string) error) *MockUserServiceUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserRole mocks base method.
func (m *MockUserService) UpdateUserRole(ctx context.Context, dni string, role domain.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, dni, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockUserServiceMockRecorder) UpdateUserRole(ctx, dni, role any) *MockUserServiceUpdateUserRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockUserService)(nil).UpdateUserRole), ctx, dni, role)
	return &MockUserServiceUpdateUserRoleCall{Call: call}
}

// MockUserServiceUpdateUserRoleCall wrap *gomock.Call
type MockUserServiceUpdateUserRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserRoleCall) Return(arg0 error) *MockUserServiceUpdateUserRoleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserRoleCall) Do(f func(context.Context, string, domain.UserRole) error) *MockUserServiceUpdateUserRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserRoleCall) DoAndReturn(f func(context.Context, string, domain.UserRole) error) *MockUserServiceUpdateUserRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *MockUserRepositoryCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
	return &MockUserRepositoryCreateUserCall{Call: call}
}

// MockUserRepositoryCreateUserCall wrap *gomock.Call
type MockUserRepositoryCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryCreateUserCall) Return(arg0 error) *MockUserRepositoryCreateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryCreateUserCall) Do(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryCreateUserCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GenerateUsersDNIReport mocks base method.
func (m *MockUserRepository) GenerateUsersDNIReport(ctx context.Context) (int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUsersDNIReport", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GenerateUsersDNIReport indicates an expected call of GenerateUsersDNIReport.
func (mr *MockUserRepositoryMockRecorder) GenerateUsersDNIReport(ctx any) *MockUserRepositoryGenerateUsersDNIReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUsersDNIReport", reflect.TypeOf((*MockUserRepository)(nil).GenerateUsersDNIReport), ctx)
	return &MockUserRepositoryGenerateUsersDNIReportCall{Call: call}
}

// MockUserRepositoryGenerateUsersDNIReportCall wrap *gomock.Call
type MockUserRepositoryGenerateUsersDNIReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGenerateUsersDNIReportCall) Return(arg0, arg1, arg2 int64, arg3 error) *MockUserRepositoryGenerateUsersDNIReportCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGenerateUsersDNIReportCall) Do(f func(context.Context) (int64, int64, int64, error)) *MockUserRepositoryGenerateUsersDNIReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGenerateUsersDNIReportCall) DoAndReturn(f func(context.Context) (int64, int64, int64, error)) *MockUserRepositoryGenerateUsersDNIReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, DNI string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, DNI)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, DNI any) *MockUserRepositoryGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, DNI)
	return &MockUserRepositoryGetUserCall{Call: call}
}

// MockUserRepositoryGetUserCall wrap *gomock.Call
type MockUserRepositoryGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetUserCall) Return(arg0 *domain.User, arg1 error) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetUserCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetUserCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *MockUserRepositoryGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
	return &MockUserRepositoryGetUserByEmailCall{Call: call}
}

// MockUserRepositoryGetUserByEmailCall wrap *gomock.Call
type MockUserRepositoryGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetUserByEmailCall) Return(arg0 *domain.User, arg1 error) *MockUserRepositoryGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetUserByEmailCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsersByRole mocks base method.
func (m *MockUserRepository) GetUsersByRole(ctx context.Context, role domain.UserRole) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRole", ctx, role)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRole indicates an expected call of GetUsersByRole.
func (mr *MockUserRepositoryMockRecorder) GetUsersByRole(ctx, role any) *MockUserRepositoryGetUsersByRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRole", reflect.TypeOf((*MockUserRepository)(nil).GetUsersByRole), ctx, role)
	return &MockUserRepositoryGetUsersByRoleCall{Call: call}
}

// MockUserRepositoryGetUsersByRoleCall wrap *gomock.Call
type MockUserRepositoryGetUsersByRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryGetUsersByRoleCall) Return(arg0 []domain.User, arg1 error) *MockUserRepositoryGetUsersByRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryGetUsersByRoleCall) Do(f func(context.Context, domain.UserRole) ([]domain.User, error)) *MockUserRepositoryGetUsersByRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryGetUsersByRoleCall) DoAndReturn(f func(context.Context, domain.UserRole) ([]domain.User, error)) *MockUserRepositoryGetUsersByRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserInformation mocks base method.
func (m *MockUserRepository) UpdateUserInformation(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInformation", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInformation indicates an expected call of UpdateUserInformation.
func (mr *MockUserRepositoryMockRecorder) UpdateUserInformation(ctx, user any) *MockUserRepositoryUpdateUserInformationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInformation", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserInformation), ctx, user)
	return &MockUserRepositoryUpdateUserInformationCall{Call: call}
}

// MockUserRepositoryUpdateUserInformationCall wrap *gomock.Call
type MockUserRepositoryUpdateUserInformationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryUpdateUserInformationCall) Return(arg0 error) *MockUserRepositoryUpdateUserInformationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryUpdateUserInformationCall) Do(f func(context.Context, *domain.User) error) *MockUserRepositoryUpdateUserInformationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryUpdateUserInformationCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserRepositoryUpdateUserInformationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserPassword mocks base method.
func (m *MockUserRepository) UpdateUserPassword(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserRepositoryMockRecorder) UpdateUserPassword(ctx, user any) *MockUserRepositoryUpdateUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserPassword), ctx, user)
	return &MockUserRepositoryUpdateUserPasswordCall{Call: call}
}

// MockUserRepositoryUpdateUserPasswordCall wrap *gomock.Call
type MockUserRepositoryUpdateUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryUpdateUserPasswordCall) Return(arg0 error) *MockUserRepositoryUpdateUserPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryUpdateUserPasswordCall) Do(f func(context.Context, *domain.User) error) *MockUserRepositoryUpdateUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryUpdateUserPasswordCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserRepositoryUpdateUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUserRole mocks base method.
func (m *MockUserRepository) UpdateUserRole(ctx context.Context, updateRole *domain.UpdateRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, updateRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockUserRepositoryMockRecorder) UpdateUserRole(ctx, updateRole any) *MockUserRepositoryUpdateUserRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserRole), ctx, updateRole)
	return &MockUserRepositoryUpdateUserRoleCall{Call: call}
}

// MockUserRepositoryUpdateUserRoleCall wrap *gomock.Call
type MockUserRepositoryUpdateUserRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserRepositoryUpdateUserRoleCall) Return(arg0 error) *MockUserRepositoryUpdateUserRoleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserRepositoryUpdateUserRoleCall) Do(f func(context.Context, *domain.UpdateRole) error) *MockUserRepositoryUpdateUserRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserRepositoryUpdateUserRoleCall) DoAndReturn(f func(context.Context, *domain.UpdateRole) error) *MockUserRepositoryUpdateUserRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
