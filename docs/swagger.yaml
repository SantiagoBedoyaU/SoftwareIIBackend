definitions:
  domain.Auth:
    properties:
      dni:
        type: string
      password:
        type: string
    type: object
  domain.UpdatePassword:
    properties:
      new_password:
        type: string
    type: object
  domain.User:
    properties:
      dni:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/domain.UserRole'
      type_dni:
        $ref: '#/definitions/domain.UserTypeDNI'
    type: object
  domain.UserRole:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - AdminRole
    - MedicRole
    - PatientRole
  domain.UserTypeDNI:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      TypeDniTP: passport
    x-enum-varnames:
    - TypeDniCC
    - TypeDniTI
    - TypeDniTP
info:
  contact: {}
  title: Software2Backend
  version: "1.0"
paths:
  /sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate user by DNI and Password
      parameters:
      - description: User credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      summary: Authenticate user by DNI and Password
  /users:
    post:
      consumes:
      - application/json
      description: Create an regular or admin user (depending on the route)
      parameters:
      - description: User atributes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create an regular or admin user (depending on the route)
  /users/administrators/register-admin:
    post:
      consumes:
      - application/json
      description: Create an regular or admin user (depending on the route)
      parameters:
      - description: User atributes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create an regular or admin user (depending on the route)
  /users/reset-password:
    post:
      consumes:
      - application/json
      description: Reset the password of an user by DNI
      parameters:
      - description: User password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Reset the password of an user by DNI
securityDefinitions:
  BearerAuth:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
